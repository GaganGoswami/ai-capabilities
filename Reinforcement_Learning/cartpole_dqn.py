











































































































device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")UPDATE_EVERY = 4LR = 5e-4TAU = 1e-3GAMMA = 0.99BATCH_SIZE = 64BUFFER_SIZE = int(1e5)        return len(self.memory)    def __len__(self):        return (states, actions, rewards, next_states, dones)        dones = torch.from_numpy(np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)).float().to(device)        next_states = torch.from_numpy(np.vstack([e.next_state for e in experiences if e is not None])).float().to(device)        rewards = torch.from_numpy(np.vstack([e.reward for e in experiences if e is not None])).float().to(device)        actions = torch.from_numpy(np.vstack([e.action for e in experiences if e is not None])).long().to(device)        states = torch.from_numpy(np.vstack([e.state for e in experiences if e is not None])).float().to(device)        experiences = random.sample(self.memory, k=self.batch_size)    def sample(self):        self.memory.append(e)        e = self.experience(state, action, reward, next_state, done)    def add(self, state, action, reward, next_state, done):        self.seed = random.seed(seed)        self.experience = namedtuple("Experience", field_names=["state", "action", "reward", "next_state", "done"])        self.batch_size = batch_size        self.memory = deque(maxlen=buffer_size)        self.action_size = action_size    def __init__(self, action_size, buffer_size, batch_size, seed):class ReplayBuffer:            target_param.data.copy_(tau*local_param.data + (1.0-tau)*target_param.data)        for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):    def soft_update(self, local_model, target_model, tau):        self.soft_update(self.qnetwork_local, self.qnetwork_target, TAU)        self.optimizer.step()        loss.backward()        self.optimizer.zero_grad()        loss = F.mse_loss(Q_expected, Q_targets)        Q_expected = self.qnetwork_local(states).gather(1, actions)        Q_targets = rewards + (gamma * Q_targets_next * (1 - dones))        Q_targets_next = self.qnetwork_target(next_states).detach().max(1)[0].unsqueeze(1)        states, actions, rewards, next_states, dones = experiences    def learn(self, experiences, gamma):            return random.choice(np.arange(self.action_size))        else:            return np.argmax(action_values.cpu().data.numpy())        if random.random() > eps:        self.qnetwork_local.train()            action_values = self.qnetwork_local(state)        with torch.no_grad():        self.qnetwork_local.eval()        state = torch.from_numpy(state).float().unsqueeze(0).to(device)    def act(self, state, eps=0.):                self.learn(experiences, GAMMA)                experiences = self.memory.sample()            if len(self.memory) > BATCH_SIZE:        if self.t_step == 0:        self.t_step = (self.t_step + 1) % UPDATE_EVERY        self.memory.add(state, action, reward, next_state, done)    def step(self, state, action, reward, next_state, done):        self.t_step = 0        self.memory = ReplayBuffer(action_size, BUFFER_SIZE, BATCH_SIZE, seed)        self.optimizer = optim.Adam(self.qnetwork_local.parameters(), lr=5e-4)        self.qnetwork_target = DQN(state_size, action_size, seed)        self.qnetwork_local = DQN(state_size, action_size, seed)        self.seed = random.seed(seed)        self.action_size = action_size        self.state_size = state_size    def __init__(self, state_size, action_size, seed):class Agent():        return self.fc3(x)        x = F.relu(self.fc2(x))        x = F.relu(self.fc1(state))    def forward(self, state):        self.fc3 = nn.Linear(64, action_size)        self.fc2 = nn.Linear(64, 64)        self.fc1 = nn.Linear(state_size, 64)        self.seed = torch.manual_seed(seed)        super(DQN, self).__init__()    def __init__(self, state_size, action_size, seed):class DQN(nn.Module):from collections import namedtuple, dequeimport randomimport numpy as npimport torch.nn.functional as Fimport torch.optim as optimimport torch.nn as nnimport torch